library(tools)
?tools
?commandArgs
devtools::install_github("rstudio/rmarkdown")
?lowess
lowess(cars)
plot(cars, main = "lowess(cars)")
lines(lowess(cars), col = 2)
lines(lowess(cars, f = .2), col = 3)
cars
predict(lowess(cars), cars$speed)
extract_data_module = function(fastqc_data, module_name) {
f = readLines(fastqc_data)
start_line = grep(module_name, f)
end_module_lines = grep('END_MODULE', f)
end_line = end_module_lines[which(end_module_lines > start_line)[1]]
module_data = f[(start_line+1):(end_line-1)]
writeLines(module_data, 'temp.txt')
read.csv('temp.txt', sep = '\t')
}
cars.lo <- loess(dist ~ speed, cars)
predict(cars.lo, data.frame(speed = seq(5, 30, 1)), se = TRUE)
library(RUVSeq)
?makeGroups
makeGroups(c("A","B","B","C","C","D","D","D","A"))
?RUVs
library(RUVSeq)
library(zebrafishRNASeq)
data(zfGenes)
head(zfGenes)
filter <- apply(zfGenes, 1, function(x) length(x[x>5])>=2)
filtered <- zfGenes[filter,]
genes <- rownames(filtered)[grep("^ENS", rownames(filtered))]
spikes <- rownames(filtered)[grep("^ERCC", rownames(filtered))]
x <- as.factor(rep(c("Ctl", "Trt"), each=3))
set <- newSeqExpressionSet(as.matrix(filtered),
phenoData = data.frame(x, row.names=colnames(filtered)))
set
library(RColorBrewer)
colors <- brewer.pal(3, "Set2")
plotRLE(set, outline=FALSE, ylim=c(-4, 4), col=colors[x])
plotPCA(set, col=colors[x], cex=1.2)
set <- betweenLaneNormalization(set, which="upper")
plotRLE(set, outline=FALSE, ylim=c(-4, 4), col=colors[x])
plotPCA(set, col=colors[x], cex=1.2)
set1 <- RUVg(set, spikes, k=1)
pData(set1)
normCounts(set1)
differences <- makeGroups(x)
differences
x
set3 <- RUVs(set, genes, k=1, differences)
pData(set3)
set3
str(set3)
set3@assayData$counts
set3
str(set3)
set@assayData$counts
set@assayData$counts[, 1:3]
differences
differences[1, ]
RUVs(set@assayData$counts[, 1:3], genes, k=1, differences[1,])
set@assayData$counts[, 1:3]
str(set@assayData$counts[, 1:3])
head(set@assayData$counts[, 1:3])
RUVs(as.numeric(set@assayData$counts[, 1:3]), genes, k=1, differences[1,])
set3 <- RUVs(set@assayData$counts, genes, k=1, differences)
str(set3)
set3 <- RUVs(set, genes, k=1, differences)
str(set3)
set3 <- RUVs(set@assayData$counts, genes, k=1, differences)
str(set3)
set3 <- RUVs(set, genes, k=1, differences)
str(set3)
set3@phenoData@data
set3 <- RUVs(set@assayData$counts, genes, k=1, differences)
str(set3)
set3$W
set3$W/(set3$W)
set3$W/sum(set3$W)
set3 <- RUVs(set, genes, k=1, differences)
str(set3)
set3@phenoData@data
set3@phenoData@data$W_1
set3@phenoData@data$W_1/sum(set3@phenoData@data$W_1)
set3 <- RUVs(set@assayData$counts, genes, k=1, differences)
str(set3)
set3$W/sum(set3$W)
RUVs(as.numeric(set@assayData$counts[, 1:3]), genes, k=1, differences[1,])
RUVs(set@assayData$counts[, 1:3], genes, k=1, differences[1,])
RUVs(set@assayData$counts[, 1:3], genes, k=1)
set@assayData$counts[, 1:3]
set@assayData$counts
str(set@assayData$counts)
str(set@assayData$counts[, 1:3])
differences
RUVs(set@assayData$counts[, 1:3], genes, k=1, differences[1,])
RUVs(set@assayData$counts[, 1:3], genes, k=1)
RUVs(set@assayData$counts[, 1:6], genes, k=1, differences)
differences[1,]
RUVs(set@assayData$counts[, 1:3], genes, k=1, differences[1,,drop=False])
RUVs(set@assayData$counts[, 1:3], genes, k=1, differences[1,,drop=FALSE])
single_replicate_set = RUVs(set@assayData$counts[, 1:3], genes, k=1, differences[1,,drop=FALSE])
multiple_replicate_set = RUVs(set@assayData$counts[, 1:6], genes, k=1, differences)
single_replicate_set$W
multiple_replicate_set$W
single_replicate_set_1 = RUVs(set@assayData$counts[, 1:3], genes, k=1, differences[1,,drop=FALSE])
single_replicate_set_2 = RUVs(set@assayData$counts[, 4:6], genes, k=1, differences[2,,drop=FALSE])
multiple_replicate_set = RUVs(set@assayData$counts[, 1:6], genes, k=1, differences)
differences[2,,drop=FALSE]
single_replicate_set_2 = RUVs(set@assayData$counts[, 4:6], genes, k=1, differences[1,,drop=FALSE])
single_replicate_set_1 = RUVs(set@assayData$counts[, 1:3], genes, k=1, differences[1,,drop=FALSE])
single_replicate_set_2 = RUVs(set@assayData$counts[, 4:6], genes, k=1, differences[1,,drop=FALSE])
multiple_replicate_set = RUVs(set@assayData$counts[, 1:6], genes, k=1, differences)
single_replicate_set_1$W
single_replicate_set_2$W
multiple_replicate_set$W
RUVs
standardGeneric("RUVs")
RUVSeq::RUVs()
RUVSeq::RUVs
showMethods("RUVs")
single_replicate_set_1
str(single_replicate_set_1)
head(single_replicate_set_1$normalizedCounts)
head(single_replicate_set_2$normalizedCounts)
head(multiple_replicate_set$normalizedCounts)
set3$normalizedCounts
head(multiple_replicate_set$normalizedCounts)
head(set3$normalizedCounts)
head(set@assayData$normalizedCounts)
head(set2@assayData$normalizedCounts)
head(set@assayData$normalizedCounts)
head(single_replicate_set_1$normalizedCounts)
head(set3$normalizedCounts)
str(set3)
library(DESeq2)
?DESeq
DESeq
?DESeq
?normalizationFactors
dds <- makeExampleDESeqDataSet(n=100, m=4)
dds
normalizationFactors(dds)
normFactors <- matrix(runif(nrow(dds)*ncol(dds),0.5,1.5),
ncol=ncol(dds),nrow=nrow(dds),
dimnames=list(1:nrow(dds),1:ncol(dds)))
normFactors
normFactors <- normFactors / exp(rowMeans(log(normFactors)))
normFactors
library(DESeq2)
?DESeq
?results
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("DEsubs")
library(DEsubs)
vignette(package='DEsubs')
vignette("DEsubs")
85/4
85/4*2
85/4*2 + 26.80*2
85/4*2 + 26.80*2 - 234.74
vignette("DEsubs")
vignette("DEsubs")
library(DESeq2)
?DESeq
devtools::install_github("datacamp/RDocumentation")
library(RDocumentation)
?roast
?fry
library(edgeR)
?fry
require(limma)
y <- matrix(rnorm(100*4),100,4)
design <- cbind(Intercept=1,Group=c(0,0,1,1))
# First set of 5 genes contains 3 that are genuinely differentially expressed
index1 <- 1:5
y[index1,3:4] <- y[index1,3:4]+3
# Second set of 5 genes contains none that are DE
index2 <- 6:10
roast(y,index1,design,contrast=2)
fry(y,list(set1=index1,set2=index2),design,contrast=2)
version()
version
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages("rstudioapi")
rstudioapi::isAvailable("0.99.149")
devtools::install_github("hadley/devtools")
library(devtools)
has_devel()
library(devtools)
has_devel()
devtools::has_tests()
devtools::has_devel()
devtools::install_github("hadley/devtools")
devtools::install_github("hadley/devtools", force = TRUE)
devtools::has_devel()
library(devtools)
has_devel()
sessionInfo()
library(devtools)
sessionInfo()
library(tools)
sessionInfo()
library(devtools)
library(callr)
has_devel
has_devel()
findRestart()
find_rtools()
library(rtools)
install.packages('rtools')
devtools::install_github('hadley/devtools')
devtools::uninstall_github('hadley/devtools')
uninstall('devtools')
devtools::uninstall('devtools')
devtools::uninstall('hadley/devtools')
devtools::uninstall("hadley/devtools")
devtools::install_github("hadley/devtools")
devtools::install_github("hadley/devtools", force=TRUE)
source("https://install-github.me/mangothecat/callr")
devtools::install_github("hadley/devtools", force=TRUE)
library(devtools)
uninstall('callr')
install.packages('callr')
install.packages("callr")
devtools::install_github("hadley/devtools", force=TRUE)
uninstall('devtools')
remove.packages('callr')
remove.packages('devtools')
library(devtools)
install.packages('devtools')
install.packages("devtools")
library(devtools)
has_devel()
version
?"'"
writeLines('\\\')
)
)')')
>
"
';;'agamamh
writeLines("\\?")
library(stringr)
writeLines('\\.')
writeLines(regex('\\.'))
regex('\\.')
regex('\\.')
?regex
alt
library(readr)
col_integer()
?col_integer
setwd("~/Desktop/MingChenPresentations/lab-meeting-12012017")
